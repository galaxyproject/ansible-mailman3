---

- name: Create/update Mailman Core configuration
  template:
    src: mailman.cfg.j2
    dest: "{{ mailman3_etc_dir }}/mailman.cfg"
    owner: "{{ __mailman3_user_name }}"
    group: "{{ __mailman3_group_name }}"
    mode: "0640"
    backup: "{{ mailman3_backup_configs }}"
  when: mailman3_run_m3core
  notify:
    - restart mailman3-core service


- name: Create HyperKitty configuration file
  template:
    src: "hyperkitty.cfg.j2"
    dest: "{{ mailman3_etc_dir }}/hyperkitty.cfg"
    mode: "0644"
    owner: "{{ mailman3_web_user }}"
    group: "{{ mailman3_web_group }}"
    backup: "{{ mailman3_backup_configs }}"
  when: mailman3_run_postorius and mailman3_run_hyperkitty
  notify:
    - restart mailman3-web service


- name: Create/update Django project
  template:
    src: "{{ item.name }}.j2"
    mode: "{{ item.mode }}"
    owner: "{{ mailman3_web_user }}"
    group: "{{ mailman3_web_group }}"
    dest: "{{ mailman3_django_project_dir }}/{{ item.name }}"
    backup: "{{ mailman3_backup_configs }}"
  with_items:
    - name: manage.py
      mode: "0755"
    - name: settings.py
      mode: "0644"
    - name: urls.py
      mode: "0644"
    - name: wsgi.py
      mode: "0644"
  when: __mailman3_pip and mailman3_run_postorius
  notify:
    - restart mailman3-web service

#- name: Dump Django default config
#  debug:
#    msg: "{{__mailman3_django_config_default}}"
#
#- name: Dump Django custom config
#  debug:
#    msg: "{{mailman3_django_config}}"
#
#- name: Dump Django merged config
#  debug:
#    msg: "{{__mailman3_django_config_merged}}"

- name: Create/update Django local settings
  template:
    src: "settings_local.py.j2"
    dest: "{{ mailman3_django_settings_file }}"
    owner: "{{ mailman3_web_user }}"
    group: "{{ mailman3_web_group }}"
    mode: "0640"
    backup: "{{ mailman3_backup_configs }}"
  when: mailman3_run_postorius
  notify:
    - restart mailman3-web service


- name: Create Django local settings symlink
  file:
    src: "{{ mailman3_django_settings_file }}"
    dest: "{{ mailman3_django_project_dir }}/settings_local.py"
    state: link
  when: __mailman3_pip and mailman3_run_postorius
  notify:
    - restart mailman3-web service


- name: Create Django site configs
  copy:
    content: |
      # import project settings first
      from settings import *
      # override any configured SITE_ID
      SITE_ID = {{ site_id + 1 }}
      FILTER_VHOST = True
      DEFAULT_FROM_EMAIL = '{{ mailman3_default_from_user }}@{{ domain }}'
    dest: "{{ mailman3_django_project_dir }}/settings_{{ domain | replace('.', '_') | replace('-', '_') }}.py"
  loop: "{{ mailman3_domains | default([]) }}"
  loop_control:
    index_var: site_id
    loop_var: domain
  when: mailman3_domains is defined and mailman3_run_postorius
  notify:
    - restart mailman3-web service


# This runs before collectstatic because it creates the log file, which must be created as the web user
- name: Create/update Django DB schema
  django_manage:
    command: migrate
    app_path: "{{ mailman3_django_project_dir }}"
    virtualenv: "{{ mailman3_install_dir }}"
  when: mailman3_run_postorius
  become: yes
  become_user: "{{ mailman3_web_user }}"
  notify:
    - restart mailman3-web service


- name: Collect Django static files
  django_manage:
    command: collectstatic
    app_path: "{{ mailman3_django_project_dir }}"
    virtualenv: "{{ mailman3_install_dir }}"
  when: __mailman3_pip and mailman3_run_postorius


- name: Check Django superusers
  django_manage:
    command: >-
      shell -c 'import sys;
      from django.contrib.auth.models import User;
      sys.stdout.write("exists") if User.objects.filter(username="{{ item.name }}").count() > 0 else sys.stdout.write("missing")'
    app_path: "{{ mailman3_django_project_dir }}"
    virtualenv: "{{ mailman3_install_dir }}"
  with_items: "{{ mailman3_django_superusers }}"
  when: mailman3_run_postorius
  register: __mailman3_checksuperuser_result
  changed_when: __mailman3_checksuperuser_result.out == "missing"
  loop_control:
    label: "{{ item.name }}"
  become: yes
  become_user: "{{ mailman3_web_user }}"


- name: Create Django superusers
  django_manage:
    command: >-
      shell -c 'import sys;
      from django.contrib.auth.models import User;
      User.objects.create_superuser("{{ item.item.name }}", "{{ item.item.email }}", "{{ item.item.pass }}")'
    #command: "createsuperuser --noinput --username={{ item.item.name }} --email={{ item.item.email }}"
    app_path: "{{ mailman3_django_project_dir }}"
    virtualenv: "{{ mailman3_install_dir }}"
  when: item is changed and mailman3_run_postorius
  with_items: "{{ __mailman3_checksuperuser_result.results }}"
  register: __mailman3_createsuperuser_result
  changed_when: true
  loop_control:
    label: "{{ item.item.name }}"
  become: yes
  become_user: "{{ mailman3_web_user }}"


- name: Check Django sites
  django_manage:
    command: >-
      shell -c 'import sys;
      from django.contrib.sites.models import Site;
      sys.stdout.write("exists") if Site.objects.filter(domain="example.com").count() > 0 else sys.stdout.write("missing")'
    app_path: "{{ mailman3_django_project_dir }}"
    virtualenv: "{{ mailman3_install_dir }}"
  when: mailman3_run_postorius
  register: __mailman3_checkexamplesite_result
  changed_when: __mailman3_checkexamplesite_result.out == "exists"
  # FIXME:
  become: yes
  become_user: "{{ mailman3_web_user }}"


- name: Correct default Django site
  django_manage:
    command: >-
      shell -c 'from django.contrib.sites.models import Site;
      Site.objects.filter(domain="example.com").update(
      domain="{{ (mailman3_domains | default([])).0 | default(inventory_hostname) }}",
      name="{{ (mailman3_domains | default([])).0 | default(inventory_hostname) }}"
      )'
    app_path: "{{ mailman3_django_project_dir }}"
    virtualenv: "{{ mailman3_install_dir }}"
  when: __mailman3_checkexamplesite_result is changed and mailman3_run_postorius
  changed_when: mailman3_run_postorius
  become: yes
  become_user: "{{ mailman3_web_user }}"

# TODO: create/remove domains (for right now the admin can do this in the UI)

- name: Create/update uWSGI configuration file
  template:
    src: uwsgi.ini.j2
    dest: "{{ mailman3_etc_dir }}/uwsgi.ini"
  when: __mailman3_pip and mailman3_domains is not defined and mailman3_run_postorius
  notify:
    - restart mailman3-web service

- name: Create/update uWSGI domain configuration files
  template:
    src: uwsgi.ini.j2
    dest: "{{ mailman3_etc_dir }}/uwsgi_{{ domain }}.ini"
  loop: "{{ mailman3_domains | default([]) }}"
  loop_control:
    index_var: site_id
    loop_var: domain
  when: mailman3_domains is defined and mailman3_run_postorius
  notify:
    - restart mailman3-web service


# This is idempotent so it's safe to do as an always-run task
- name: Compress CSS
  django_manage:
    app_path: "{{ mailman3_django_project_dir }}"
    command: compress
    virtualenv: "{{ mailman3_install_dir }}"
  when: mailman3_run_postorius
